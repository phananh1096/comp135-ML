{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# COMP 135 Fall 2019: HW1 STARTER"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Student Name: Phan Anh Nguyen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup comp135_env package imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import sklearn.neighbors\n",
    "import sklearn.tree\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup student-defined imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from LeastSquaresLinearRegression import LeastSquaresLinearRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from evaluate_perf_metrics import (\n",
    "    calc_perf_metric__absolute_error, calc_perf_metric__squared_error,\n",
    "    calc_perf_metrics_for_regressor_on_dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "## TODO load all data (train/valid/test) into x_tr_NF, x_va_NF, x_te_NF, ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_tr_NF = np.loadtxt('data_abalone/y_train.csv', delimiter=',', skiprows=1)\n",
    "y_va_NF = np.loadtxt('data_abalone/y_valid.csv', delimiter=',', skiprows=1)\n",
    "y_te_NF = np.loadtxt('data_abalone/y_test.csv', delimiter=',', skiprows=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_tr_NF = np.loadtxt('data_abalone/x_train.csv', delimiter=',', skiprows=1)\n",
    "x_va_NF = np.loadtxt('data_abalone/x_valid.csv', delimiter=',', skiprows=1)\n",
    "x_te_NF = np.loadtxt('data_abalone/x_test.csv', delimiter=',', skiprows=1)\n",
    "#np.loadtxt('data_abalone/x_train.csv', delimiter=',', skiprows=1, usecols = 2)\n",
    "diam_mm_tr = x_tr_NF[:,2].copy()\n",
    "diam_mm_va = x_va_NF[:,2].copy()\n",
    "diam_mm_te = x_te_NF[:,2].copy()\n",
    "#np.loadtxt('data_abalone/x_train.csv', delimiter=',', skiprows=1, usecols = 5)\n",
    "shucked_weight_g_tr = x_tr_NF[:,5].copy()\n",
    "shucked_weight_g_va = x_va_NF[:,5].copy()\n",
    "shucked_weight_g_te = x_te_NF[:,5].copy()\n",
    "feature2_tr = x_tr_NF[:,[2,5]].copy()\n",
    "feature2_va = x_va_NF[:,[2,5]].copy()\n",
    "feature2_te = x_te_NF[:,[2,5]].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1a : Abalone histograms of response variable 'rings'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1a(i): Produce one figure with three subplots, showing histograms of $y$ from train/valid/test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/phananh/.conda/envs/comp135_env/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig_h, axes_arr = plt.subplots(nrows=3, ncols=1, sharex=True)\n",
    "sns.distplot(y_tr_NF, kde=False, rug=True, ax=axes_arr[0]);\n",
    "sns.distplot(y_va_NF, kde=False, rug=True, ax=axes_arr[1]);\n",
    "sns.distplot(y_te_NF, kde=False, rug=True, ax=axes_arr[2]);\n",
    "\n",
    "## TODO plot histograms on the axes\n",
    "## e.g. sns.distplot(y_tr_N, kde=False, rug=True, ax=axes_arr[0]);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1a(ii): Describe the **train** distribution. Unimodal or multimodal? What shape? Are there noticeable outliers?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO ANSWER HERE**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1a(iii): Quantify train's descriptive statistics. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum is:  1.0\n",
      "Maximum is:  29.0\n",
      "Median is:  9.0\n",
      "Mean is:  9.902392947103275\n"
     ]
    }
   ],
   "source": [
    "### TODO CODE HERE\n",
    "minimum = np.min(y_tr_NF)\n",
    "maximum = np.max(y_tr_NF)\n",
    "median = np.median(y_tr_NF)\n",
    "mean = np.mean(y_tr_NF)\n",
    "print(\"Minimum is: \", minimum)\n",
    "print(\"Maximum is: \", maximum)\n",
    "print(\"Median is: \", median)\n",
    "print(\"Mean is: \", mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1b : Scatterplots of 'rings' vs 'diam' and 'rings' vs 'shucked'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1b(i):** Create figure with two subplots: scatter plot of `diam_mm` vs `rings` and scatter of `shucked_weight_g` vs `rings`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## TODO CODE HERE\n",
    "fig_h, scatter = plt.subplots(nrows=2, ncols=1, sharex=True)\n",
    "diam_rings = sns.regplot(diam_mm_tr, y_tr_NF,ax=scatter[0])\n",
    "shucked_weight_rings = sns.regplot(shucked_weight_g_tr, y_tr_NF,ax=scatter[1])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1b(ii):** Describe the trends you between diameter and rings in a few sentences."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO ANSWER HERE**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1b(iii): Describe the trends you see between shucked weight and rings.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO ANSWER HERE**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup code for 1c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Dummy class to perform \"always guess training mean\" prediction\n",
    "class MeanPredictor():\n",
    "    def __init__(self):\n",
    "        self.yhat = None\n",
    "    \n",
    "    def fit(self, x_tr_NF, y_tr_N):\n",
    "        self.yhat = np.mean(y_tr_N)\n",
    "    \n",
    "    def predict(self, x_NF):\n",
    "        return self.yhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Dummy class to perform \"always guess training median\" prediction\n",
    "class MedianPredictor():\n",
    "    def __init__(self):\n",
    "        self.yhat = None\n",
    "    \n",
    "    def fit(self, x_tr_NF, y_tr_N):\n",
    "        self.yhat = np.median(y_tr_N)\n",
    "    \n",
    "    def predict(self, x_NF):\n",
    "        return self.yhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.2744779] [10.94938356] [10.5646027]\n"
     ]
    }
   ],
   "source": [
    "mean_value_predictor = MeanPredictor()\n",
    "mean_value_predictor.fit(x_tr_NF,y_tr_NF)\n",
    "## TODO fit the predictor, like mean_value_predictor.fit(x_tr_N2, y_tr_N)\n",
    "predict_mean_tr = mean_value_predictor.predict(x_tr_NF)\n",
    "predict_mean_va = mean_value_predictor.predict(x_va_NF)\n",
    "predict_mean_te = mean_value_predictor.predict(x_te_NF)\n",
    "\n",
    "## TODO evaluate predictions on train, valid, and test\n",
    "yhat_tr = np.full((y_tr_NF.shape[0],1),predict_mean_tr)\n",
    "yhat_va = np.full((y_va_NF.shape[0],1),predict_mean_va)\n",
    "yhat_te = np.full((y_te_NF.shape[0],1),predict_mean_te)\n",
    "\n",
    "mse_mean_tr = calc_perf_metric__squared_error(y_tr_NF, yhat_tr)\n",
    "mse_mean_va = calc_perf_metric__squared_error(y_va_NF, yhat_va)\n",
    "mse_mean_te = calc_perf_metric__squared_error(y_te_NF, yhat_te)\n",
    "\n",
    "print(mse_mean_tr, mse_mean_va, mse_mean_te)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11.08879093] [11.994] [11.602]\n"
     ]
    }
   ],
   "source": [
    "median_value_predictor = MedianPredictor()\n",
    "median_value_predictor.fit(x_tr_NF,y_tr_NF)\n",
    "## TODO fit the predictor\n",
    "predict_median_tr = median_value_predictor.predict(x_tr_NF)\n",
    "predict_median_va = median_value_predictor.predict(x_va_NF)\n",
    "predict_median_te = median_value_predictor.predict(x_te_NF)\n",
    "\n",
    "## TODO evaluate predictions on train, valid, and test\n",
    "yhat_tr_med = np.full((y_tr_NF.shape[0],1),predict_median_tr)\n",
    "yhat_va_med = np.full((y_va_NF.shape[0],1),predict_median_va)\n",
    "yhat_te_med = np.full((y_te_NF.shape[0],1),predict_median_te)\n",
    "\n",
    "mse_median_tr = calc_perf_metric__squared_error(y_tr_NF, yhat_tr_med)\n",
    "mse_median_va = calc_perf_metric__squared_error(y_va_NF, yhat_va_med)\n",
    "mse_median_te = calc_perf_metric__squared_error(y_te_NF, yhat_te_med)\n",
    "\n",
    "print(mse_median_tr, mse_median_va, mse_median_te)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1c : Results Table for Abalone MSE\n",
    "\n",
    "#### **1c:** Make a table of the **mean-squared-error** for each of the MeanPredictor and MedianPredictor predictors when evaluated on all 3 dataset splits (training, validation, and test).\n",
    "\n",
    "\n",
    "**Mean Squared Error:**\n",
    "\n",
    "| split |  guess-mean | guess-median |\n",
    "| ----- | ----------- | ------------ |\n",
    "| train |    10.274   |     11.089       \n",
    "| valid |    10.949   |     11.994\n",
    "| test  |    10.565   |     11.602\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model fitting code for 1d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.51749878831106\n"
     ]
    }
   ],
   "source": [
    "linear_regressor_2feats = LeastSquaresLinearRegressor()\n",
    "linear_regressor_2feats.fit(feature2_tr, y_tr_NF)\n",
    "yhat_2f = linear_regressor_2feats.predict(feature2_va)\n",
    "mse_2feat = calc_perf_metric__squared_error(y_va_NF, yhat_2f)\n",
    "print(mse_2feat)\n",
    "# TODO fit and evaluate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.10982385799375\n"
     ]
    }
   ],
   "source": [
    "linear_regressor_8feats = LeastSquaresLinearRegressor()\n",
    "linear_regressor_8feats.fit(x_tr_NF, y_tr_NF)\n",
    "yhat_8f = linear_regressor_8feats.predict(x_va_NF)\n",
    "mse_8feat = calc_perf_metric__squared_error(y_va_NF, yhat_8f)\n",
    "print(mse_8feat)\n",
    "# TODO fit and evaluate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1d : Results Table for Mean Squared Error on Abalone\n",
    "\n",
    "\n",
    "**Mean Squared Error:**\n",
    "\n",
    "| split |  guess mean | guess median | linear regr (2 feats) | linear regr (8 feats)\n",
    "| ----- | ----------- | ------------ | --------------------- | ---------------------\n",
    "| train |       \n",
    "| valid |\n",
    "| test  |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1d(iii):** Does using more features seem worthwhile? Do you think the improvement on the test data is significant? Why or why not?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1e: Linear Regression Coef Interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1e(i): Show the learned coefficients for the \"2 features\" dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO linear_regressor_2feats.print_weights_in_sorted_order(...)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1e(ii): Show the learned coefficients for the \"8 features\" dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO linear_regressor_8feats.print_weights_in_sorted_order(...)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1e(iii): Do the values (signs, magnitudes) of the coefficients for diameter and shucked weight make sense, esp. given the scatter plots in 1b?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO  ANSWER HERE**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1e : Model selection for K-Nearest Neighbor Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_name = 'n_neighbors'\n",
    "param_list = [1, 3, 5, 7, 11, 21, 41, 61, 81, 101, 201, 401, 801] # TODO ADD N\n",
    "# Keep only values below total training size\n",
    "param_list = [p for p in param_list if p <= param_list[-1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_mse_list = []\n",
    "valid_mse_list = []\n",
    "test_mse_list = []\n",
    "for n_neighbors in param_list:\n",
    "    knn_regr = sklearn.neighbors.KNeighborsRegressor(\n",
    "        n_neighbors=n_neighbors,\n",
    "        metric='euclidean',\n",
    "        algorithm='brute')\n",
    "    # TODO fit and predict and track perf values in the lists"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1e(i):** Make a line plot for mean-squared-error (MSE) vs $K$ on the validation set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1e(i):** Make a ZOOMED IN line plot for mean-squared-error (MSE) vs $K$ on the validation set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1e(ii):** Which value do you recommend?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1e(iii):** Cumulative results table with K-Nearest Neighbor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Mean Squared Error:**\n",
    "\n",
    "| split |  guess mean | guess median | linear regr (2 feats) | linear regr (8 feats) | k-NN (8 feats)  |\n",
    "| ----- | ----------- | ------------ | --------------------- | --------------------- | ----- |\n",
    "| train |   \n",
    "| valid | \n",
    "| test  |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <a name=\"problem-1-g\"> 1G: Analyzing Residuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO compute the predicted y values for linear regr and kNN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1f(i):** Plot scatters of y vs yhat for linear regression and the best k-NN regressor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig_h, ax_grid = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=True)\n",
    "plt.xlim([0, 26]); plt.ylim([0, 26]);\n",
    "\n",
    "# ax_grid[0].plot(y_va_N, linear_yhat_va_N, 'k.', alpha=0.2);\n",
    "ax_grid[0].set_title('Linear Regr.'); plt.xlabel('true y'); plt.ylabel('predicted y');\n",
    "\n",
    "# ax_grid[1].plot(y_va_N, knn_yhat_va_N, 'k.', alpha=0.2);\n",
    "plt.title('k-NN Regr.'); plt.xlabel('true y'); plt.ylabel('predicted y');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1f(ii):** What kinds of systematic errors does each method make? What should be done about these?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TODO ANSWER HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2 : Analysis of Doctor Visits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO load data here\n",
    "y_tr_DV = np.loadtxt('data_doctorvisits/y_train.csv', delimiter=',', skiprows=1)\n",
    "y_va_DV = np.loadtxt('data_doctorvisits/y_valid.csv', delimiter=',', skiprows=1)\n",
    "y_te_DV = np.loadtxt('data_doctorvisits/y_test.csv', delimiter=',', skiprows=1)\n",
    "x_tr_DV = np.loadtxt('data_doctorvisits/x_train.csv', delimiter=',', skiprows=1)\n",
    "x_va_DV = np.loadtxt('data_doctorvisits/x_valid.csv', delimiter=',', skiprows=1)\n",
    "x_te_DV = np.loadtxt('data_doctorvisits/x_test.csv', delimiter=',', skiprows=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2a: Histogram of Number of Doctor Visits per year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2a(i):** Produce one figure with three subplots, showing histograms of the $y$ values on training, validation, and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig_h, axes_arr = plt.subplots(nrows=3, ncols=1, sharex=True)\n",
    "sns.distplot(y_tr_DV, kde=False, rug=True, ax=axes_arr[0]);\n",
    "sns.distplot(y_va_DV, kde=False, rug=True, ax=axes_arr[1]);\n",
    "sns.distplot(y_te_DV, kde=False, rug=True, ax=axes_arr[2]);\n",
    "## TODO plot histograms on the axes\n",
    "## e.g. sns.distplot(y_tr_N, kde=False, rug=True, ax=axes_arr[0]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **2a(ii):** Describe the **training** distribution: unimodal or multimodal? What shape?\n",
    "\n",
    "TODO ANSWER HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **2a(iii):** Training statistics: What is the mean? The median? Minimum value? Maximum value? Most common value?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2b : Scatter plots looking at number of visits vs age and number of conditions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **2b(i):** Scatter plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO PLOTTING CODE HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2c : Baseline predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **2c(i):** Given stakeholder's preferences, which error metric is most appropriate and why?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because errors should scale linearly, we should use the *mean absolute error* metric.\n",
    "\n",
    "If we used mean squared error, an error of 2 would cost 4x an error of 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_value_predictor = MeanPredictor()\n",
    "mean_value_predictor.fit(x_tr_DV,y_tr_DV)\n",
    "\n",
    "## TODO fit and predict..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "median_value_predictor = MedianPredictor()\n",
    "## TODO fit and predict..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2c(ii) : Results Table for Doctor Visits with Mean Absolute Error\n",
    "\n",
    "**Mean Absolute Error:**\n",
    "\n",
    "| split |  guess-mean | guess-median |\n",
    "| ----- | ----------- | ------------ |\n",
    "| train |      \n",
    "| valid |  \n",
    "| test  | "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup code for 2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_regressor_2feats = LeastSquaresLinearRegressor()\n",
    "# TODO fit and predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_regressor_10feats = LeastSquaresLinearRegressor()\n",
    "# TODO fit and predict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** 2d(i) and 2d(ii):** Add LR to Results Table for MAE on DoctorVisits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Mean Absolute Error:**\n",
    "\n",
    "| split |  guess-mean | guess-median | linear regr (2 feats) | linear regr (10 feats) |\n",
    "| ----- | ----------- | ------------ | --------------------- | ---------------------- |\n",
    "| train |    \n",
    "| valid |    \n",
    "| test  |    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2e : DecisionTreeRegressor "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_name = 'min_samples_leaf'\n",
    "param_list = [1, 2, 3, 4, 5, 10, 20, 50, 100, 200, 500, 1000] # TODO add size of training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_mae_list = []\n",
    "valid_mae_list = []\n",
    "test_mae_list = []\n",
    "for param in param_list:\n",
    "    tree_regr = sklearn.tree.DecisionTreeRegressor(\n",
    "        min_samples_leaf=param,\n",
    "        random_state=42)\n",
    "    # Fit, predict, and track perf metrics..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2e(i): Line plot of mean absolute error vs min_samples_leaf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO plot results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **2e(ii):** Which value of min_samples_leaf would you recommend?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2e(iii): Add a column to the results table for MAE on DoctorVisits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Mean Absolute Error:**\n",
    "\n",
    "\n",
    "| split |  guess-mean | guess-median | linear regr (2 feats) | linear regr (10 feats) | decision tree\n",
    "| ----- | ----------- | ------------ | --------------------- | ---------------------- | --- |\n",
    "| train |    \n",
    "| valid |    \n",
    "| test  |    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2f : DecisionTreeRegressor with MAE Training Criterion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_mae_list = []\n",
    "valid_mae_list = []\n",
    "test_mae_list = []\n",
    "for param in param_list:\n",
    "    tree_regr = sklearn.tree.DecisionTreeRegressor(\n",
    "        criterion='mae', # USE MEAN ABSOLUTE ERROR here\n",
    "        min_samples_leaf=param,\n",
    "        random_state=42)\n",
    "    # TODO fit, predict, and track perf metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2f(i): Line plot of mean absolute error vs min_samples_leaf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2f(ii): Which value would you recommend?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Setup for 2f(iii)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2f(iii): Add a column to the results table for MAE on DoctorVisits\n",
    "\n",
    "\n",
    "**Mean Absolute Error:**\n",
    "\n",
    "\n",
    "| split |  guess-mean | guess-median | linear regr (2 feats) | linear regr (10 feats) | decision tree (MSE) | decision tree (MAE)\n",
    "| ----- | ----------- | ------------ | --------------------- | ---------------------- | --- | --- |\n",
    "| train |    \n",
    "| valid |    \n",
    "| test  |    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 3: Concept questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3a: Limits of $K$-NN\n",
    "\n",
    "**Question**: When $K$ equals the total training set size $N$, the $K$-nearest-neighbor regression algorithm approaches the behavior of which other regression method discussed here?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3a Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3b: Modifications of $K$-NN\n",
    "\n",
    "**Question**: Suppose in problem 2, when trying to minimize *mean absolute error* on heldout data, that instead of a DecisionTreeRegressor, we had used a $K$-NN regressor with Euclidean distance (as in Problem 1f).  \n",
    "\n",
    "Would we expect $K$-NN with large $K$ to always beat the strongest constant-prediction baseline (e.g. guess-median or guess-mean)?\n",
    "\n",
    "To get better MAE values using a nearest-neighbor like approach, should we change the distance function used to compute neighbors? Would we need to change some other step of the $K$-NN prediction process?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3b Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3c: Linear Regression with Categorical Features\n",
    "\n",
    "**Question:** Your colleague trains a linear regression model on a subset of the DoctorVisits data using only the `has_medicaid` and `has_private_insurance` features. Thus, all features in the vector have a binary categorical type and can be represented via a redundant one-hot encoding. \n",
    "\n",
    "To your dismay, you discover that your colleague failed to include a bias term (aka intercept term) when training the weights. You recall from class that including a bias term can be important.\n",
    "\n",
    "To be concrete, you wish each example $x_i$ was represented as a (bias-included) vector:\n",
    "$$\n",
    "x_i = [\n",
    "    \\texttt{has_medicaid}\n",
    "    \\quad \\texttt{has_private_insurance}\n",
    "    \\quad 1\n",
    "] \\quad \\quad \\quad ~\n",
    "$$\n",
    "\n",
    "However, your colleague used the following representation:\n",
    "$$\n",
    "\\tilde{x}_i = [\n",
    "    \\texttt{has_medicaid}\n",
    "    \\quad \\texttt{not(has_medicaid)}\n",
    "    \\quad \\texttt{has_private_insurance}\n",
    "    \\quad \\texttt{not(has_private_insurance)} \n",
    "]\n",
    "$$\n",
    "\n",
    "Your colleague has delivered to you a length-4 feature vector $\\tilde{w}$ for the 4 features above, but then left for vacation without giving you access to the training data.\n",
    "\n",
    "Can you manipulate the $\\tilde{w}$ vector to estimate an appropriate $w$ and $b$ such that for all possible inputs $x_i$:\n",
    "\n",
    "$$\n",
    "    w^T x_i + b = \\tilde{w}^T \\tilde{x}_i\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3c Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TODO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
